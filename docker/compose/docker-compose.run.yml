services:
  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z    
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    ports:
      - "9000:9000"   # S3  API
      - "9001:9001"   # Web console
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - lakehouse-net
      
  mc:
    image: minio/mc
    container_name: mc
    entrypoint: ["tail", "-f", "/dev/null"]   # Giữ container chạy để exec vào dùng lệnh mc
    depends_on:
      minio:
        condition: service_healthy  # Chờ MinIO sẵn sàng trước
    volumes:
      - ../../scripts:/scripts          
    networks:
      - lakehouse-net
    
  spark:
    image: lakehouse/spark:3.5.0
    container_name: spark
    depends_on:
      - minio
    networks:
      - lakehouse-net
    ports:
      - "4040:4040"
    volumes:
      - ../../spark_jobs:/opt/bitnami/spark/spark_jobs  
  
  metastore-db:
    container_name: metastore-db
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=metastore
      - MYSQL_USER=hive
      - MYSQL_PASSWORD=hive123
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "hive", "-phive123"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lakehouse-net

  hive-metastore:
    container_name: hive-metastore
    image: lakehouse/hive-metastore:4.0.0
    environment:
      - SERVICE_NAME=metastore
    depends_on:
      metastore-db:
        condition: service_healthy
    ports:
      - "9083:9083"
    networks:
      - lakehouse-net
  
  trino:
    image: lakehouse/trino:468
    container_name: trino
    ports:
      - "8081:8080"
    volumes:
      - ../../trino/catalog:/etc/trino/catalog     # Mount catalog config
      - ../../trino/config/config.properties:/etc/trino/config.properties
      - ../../trino/config/jvm.config:/etc/trino/jvm.config
      - ../../trino/config/node.properties:/etc/trino/node.properties
      - ../../trino/config/log.properties:/etc/trino/log.properties
    depends_on:
      - hive-metastore
      - minio
    networks:
      - lakehouse-net
  
  superset:
    image: lakehouse/superset:4.1.2
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123
      - ADMIN_EMAIL=admin@localhost
      - SUPERSET_SECRET_KEY=thisisaverysecretkey
    volumes:
      - ../../superset/pythonpath:/app/pythonpath
      - ../../superset/superset_home:/app/superset_home
    networks:
      - lakehouse-net
    depends_on:
      - trino
    
  zookeeper:
    image: bitnami/zookeeper:3.8.4
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_4LW_COMMANDS_WHITELIST=ruok,srvr,mntr
    ports:
      - "2181:2181"
    networks:
      - lakehouse-net
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/zookeeper/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: lakehouse/kafka:3.9.0
    container_name: kafka
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    networks:
      - lakehouse-net

  airflow:
    image: lakehouse/airflow:3.0.1
    container_name: airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__FERNET_KEY=supersecret 
    volumes:
      - ../../airflow/dags:/opt/airflow/dags
      - ../../airflow/plugins:/opt/airflow/plugins
      - ../../airflow/logs:/opt/airflow/logs
    ports:
      - "8082:8080"
    depends_on:
      - kafka
    networks:
      - lakehouse-net
    command: standalone

volumes:
  minio-data:

networks:
  lakehouse-net:
    driver: bridge
